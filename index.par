### Paramour 1.0
  author: Ephellon Dantzler
  date: Fri Aug 5, 2016
  time: 21:00 CST -06:00
  license: "MIT"
###

# @1.5

# $con -> console
# $win => window

# Tuples ----------------
var(catcher, value_1) = {{
  "abc", 123, /def/g, [123, 456, 789]
}};

var(value_2, value_3) = Tuple.next;

###
  catcher - the Tuple itself
  value_1 - "abc"
  value_2 - 123
  value_3 - /def/g
###

var(value_4) = object_catcher.next();
  # value_4 - [123, 456, 789]

# Functions ----------------
log(String message, details...) {
  $con.log(message)
}

log(String message) {
  $con.log(message)
}

# Classes ----------------
Employee {
  <init>(data = {}) {
    for(var entry in data)
      @[entry] = data[entry];
  }

  .pull(entry) {
    -> @[entry]
  }

  .push(data) {
    for(var entry in data)
      @[entry] = data[entry];
  }

  .remove(entry) {
    -> @[entry] = null
  }
}

Employee.Manager {
  <init>(data = {}) {
    for(var entry in data)
      @[entry] = data[entry];
    @role = "Manager"
  }

  remove(entries...) {
    for(var x = 0; x < entries.length; x++)
      super entries[x]
  }
}

var Bob = new Employee({
  name: "Bob Dylan",
  age: 41,
  role: "Cashier"
});

### Custom Operators ----------------
 These behave as a sort-of "get" for operators
 custom operators can take up to 4 spaces
 ! up to ====, for a grand total of 50,625 possible operators
 ! ~ * / % + - < > & ^ | ? : =
###

<operator ^ [Number, Number]> {
  -> Math.pow($1, $2)
}

<operator = [Number, Number]> {
  -> $1 === $2
}

<suffix-operator ? [Boolean]> {
  if($1)
    -> $1;
  else
    +> SyntaxError("? Operator was given 'false'");
}

<prefix-operator !> {
  -> ($1 !== undefined && $1 !== null)
}

# also accepts name => ()
if(=> ((2^2) = 4)?) {
  $con.log("Why, hello")
}