Paramour Crash Course
  If you want to modify Paramour, or completely build a new language, here are some things to note:
##### below, some variables are given as "Type name", and "Return-Type Type name"
    variables:
      String input - the original input given to Paramour; often redeclared inside of some functions
      String backup - a backup copy of "input"
      Array exps - all of the patterns used to modify "input," dynamically updated
      RegExp errors - errors to remove
      RegExp reserved - reserved words and symbols
      Array operators - a list of all non-alphanumeric operators
      Object oprs - a list of each non-alphanumeric operator and a respecting name, {"operator": "name"}

##### Paramour's lists and "medulla"; these are free to change, delete or add onto
      Array MULTI_LINE - all multiline comments
      Array SINGLE_LINE - all single line comments
      Array REGEXP - all Regular Expressions
      Array DOUBLE_QUOTE - all double quoted strings
      Array SINGLE_QUOTE - all single quoted strings
      Array QUASI - all grave quoted strings
      Array PAREN - all parenthesis expressions
      Array BRACK - all bracket expressions
      Array BRACE - all curly brace expressions
      Array TUPLES - all tuple expressions, double curly brace "{{}}"
      Array EMUS - all emulation expressions, commented "@version"
      Array PHANTOMS - all phantom expressions, commented "$variable -> value", or "$variable => value"
      Object patterns - a list of each expression to look for, with a RegExp to use as the delimiter; the pattern name must macth a variable name that is an array, example {"EMUS": /#\s+@1.5/}
      Object runtime - a list that detects/modifies the currently running JavaScript version
        Boolean function .is (String|Number version)
          returns if the current JavaScript version is "version"
        Boolean function .has (String|Number version)
          returns if the current JavaScript version is in the array of supported versions
        Array function .emulate (String|Number version)
          emulates a different runtime; but adds an asterik to the emulation number, example "1.8.*"
        String .original
          the actual JavaScript version
##### Other Paramour goodies
      Object navigator - the original "navigator" object, with some modifications
        String .runtime - runtime.original
        Boolean .paramour - true
      Paramour - here is a list of methods/properties that may be useful
        Object .dockets - a list of functions that Paramour will format, {"function's name": "function's arguments"}
        String function .types (* item...)
          returns a comma seperated list of function names/constructors/object types
        Array function .pull (String name)
          returns the array of arguments from Paramour.dockets
        Number function .push (String name, String arguments)
          adds the "arguments" to Paramour.dockets["name"], and returns its length

    functions:
      Tuple (* item...) - "[] with {} for-in/yield iteration"
        returns a Tuple object, or an item from the Tuple
          The first call/declaration of a Tuple returns an object
          Each call after returns an item from the Tuple, until reaching the end--then returns undefined
      Operator (String operator, String type, String fix, String function, String brace)
        returns undefined, but modifies Operator.kids
          operator - the symbol(s) that are going to be used
          type - how many there are, i.e. "==" -> "double equals"
          fix - the root of the operator: prefix-, media-, or suffix-
          function - the function to call on, i.e. "==" -> "Double_Equals_Operator"
          brace - the brace expression that will be used
      argify (String|Array arguments, String|Array types)
        returns a formatted list of variable names
          example argify("String name")
            returns "name = arguments[0]"
          example argify("String name = 'John'")
            returns "name = arguments[0] || 'John'"
      unhandle (String input, String|Array type)
        compressess "input" using "type" or "exps"
          example unhandle("a = ['abc', 123]")
            returns "a = BRACK.0"
      handle (String input, Number index) - see "function handle" for further detail
        decompressess "input" using Paramour's "medulla" along with it's own "medulla"
          example handle("a = BRACK.0")
            returns "a = [SINGLE_QUOTE.0, 123]"
      hand (String input, String defenition)
        returns a formatted operator-string
          example hand("||", "prefix-")
            returns "Double_Or_Prefix_Operator_"
      decompile (String input, String|Array expressions, Boolean|Number all)
        searches for and replaces "expressions" using "handle"
          expressions - comma, space, or pipe seperated list
          Boolean all - if true, "decompile" replaces all "expressions", otherwise just the first
          Number all - "decompile" replaces that many "expressions"
      compile (String input, * arguments)
        the "brain" of Paramour
        var patterns - a list of patterns and how to handle them
        \j - variable name "[a-z\$_][\w\$]*"
        \# - number "(\.\d+)"
        \s - spaces (no newline/carriage return) "[\x20\t\v ]"
          example of functions
          var pattern = {
            // ...
            "(\\j)\\s*(PAREN\\.\\#)\\s*(BRACE\\.\\#)": function(e, a, b, c) {
              return "function " + a + decompile(b) + decompile(c, "BRACE")
            }
          }

#####
  and after ~2 weeks of developing:
    funtions - stable
    spreads - stable
    classes - stable
    tuples - stable
    variables - stable, but testing
    custom operators - stable, but testing
      @prefix vs. suffix operators
      explanation {
        "Each operator can only be used once as either prefix, media, or suffix"
        <suffix-operator ? [String]> {
          -> $1.indexOf("&") > -1
        }

        <prefix-operator ? [String]> {
          -> $1.indexOf("&") === -1
        }

        => ("apples & bananas")?
          # returns true
        => ?("apples & bananas")
          # returns true, defaults to ?-suffix
      }
    yields - theoretical stage